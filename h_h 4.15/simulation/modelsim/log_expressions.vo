// Copyright (C) 1991-2009 Altera Corporation
// Your use of Altera Corporation's design tools, logic functions 
// and other software and tools, and its AMPP partner logic 
// functions, and any output files from any of the foregoing 
// (including device programming or simulation files), and any 
// associated documentation or information are expressly subject 
// to the terms and conditions of the Altera Program License 
// Subscription Agreement, Altera MegaCore Function License 
// Agreement, or other applicable license agreement, including, 
// without limitation, that your use is for the sole purpose of 
// programming logic devices manufactured by Altera and sold by 
// Altera or its authorized distributors.  Please refer to the 
// applicable agreement for further details.

// VENDOR "Altera"
// PROGRAM "Quartus II"
// VERSION "Version 9.0 Build 235 06/17/2009 Service Pack 2 SJ Web Edition"

// DATE "03/16/2021 11:01:23"

// 
// Device: Altera EPF10K50SQC240-3 Package PQFP240
// 

// 
// This Verilog file should be used for ModelSim-Altera (Verilog) only
// 

`timescale 1 ns/ 1 ps

module log_expressions (
	a,
	p);
input 	[3:0] a;
output 	p;

wire gnd = 1'b0;
wire vcc = 1'b1;

tri1 devclrn;
tri1 devpor;
tri1 devoe;
// synopsys translate_off
initial $sdf_annotate("log_expressions_v.sdo");
// synopsys translate_on

wire \p~11_combout ;
wire [3:0] \a~dataout ;


// atom is at PIN_212
flex10ke_io \a[0]~I (
	.datain(gnd),
	.clk(gnd),
	.ena(vcc),
	.aclr(gnd),
	.oe(gnd),
	.devclrn(devclrn),
	.devpor(devpor),
	.devoe(devoe),
	.dataout(\a~dataout [0]),
	.padio(a[0]));
// synopsys translate_off
defparam \a[0]~I .feedback_mode = "from_pin";
defparam \a[0]~I .operation_mode = "input";
defparam \a[0]~I .reg_source_mode = "none";
// synopsys translate_on

// atom is at PIN_210
flex10ke_io \a[1]~I (
	.datain(gnd),
	.clk(gnd),
	.ena(vcc),
	.aclr(gnd),
	.oe(gnd),
	.devclrn(devclrn),
	.devpor(devpor),
	.devoe(devoe),
	.dataout(\a~dataout [1]),
	.padio(a[1]));
// synopsys translate_off
defparam \a[1]~I .feedback_mode = "from_pin";
defparam \a[1]~I .operation_mode = "input";
defparam \a[1]~I .reg_source_mode = "none";
// synopsys translate_on

// atom is at PIN_90
flex10ke_io \a[2]~I (
	.datain(gnd),
	.clk(gnd),
	.ena(vcc),
	.aclr(gnd),
	.oe(gnd),
	.devclrn(devclrn),
	.devpor(devpor),
	.devoe(devoe),
	.dataout(\a~dataout [2]),
	.padio(a[2]));
// synopsys translate_off
defparam \a[2]~I .feedback_mode = "from_pin";
defparam \a[2]~I .operation_mode = "input";
defparam \a[2]~I .reg_source_mode = "none";
// synopsys translate_on

// atom is at PIN_92
flex10ke_io \a[3]~I (
	.datain(gnd),
	.clk(gnd),
	.ena(vcc),
	.aclr(gnd),
	.oe(gnd),
	.devclrn(devclrn),
	.devpor(devpor),
	.devoe(devoe),
	.dataout(\a~dataout [3]),
	.padio(a[3]));
// synopsys translate_off
defparam \a[3]~I .feedback_mode = "from_pin";
defparam \a[3]~I .operation_mode = "input";
defparam \a[3]~I .reg_source_mode = "none";
// synopsys translate_on

// atom is at LC1_A24
flex10ke_lcell \p~11 (
// Equation(s):
// \p~11_combout  = \a~dataout [2] & \a~dataout [0] & (!\a~dataout [3] # !\a~dataout [1]) # !\a~dataout [2] & \a~dataout [1] & (\a~dataout [0] # !\a~dataout [3])

	.dataa(\a~dataout [0]),
	.datab(\a~dataout [1]),
	.datac(\a~dataout [2]),
	.datad(\a~dataout [3]),
	.aclr(gnd),
	.aload(gnd),
	.clk(gnd),
	.cin(gnd),
	.cascin(vcc),
	.devclrn(devclrn),
	.devpor(devpor),
	.combout(\p~11_combout ),
	.regout(),
	.cout(),
	.cascout());
// synopsys translate_off
defparam \p~11 .clock_enable_mode = "false";
defparam \p~11 .lut_mask = "28ac";
defparam \p~11 .operation_mode = "normal";
defparam \p~11 .output_mode = "comb_only";
defparam \p~11 .packed_mode = "false";
// synopsys translate_on

// atom is at PIN_6
flex10ke_io \p~I (
	.datain(\p~11_combout ),
	.clk(gnd),
	.ena(vcc),
	.aclr(gnd),
	.oe(vcc),
	.devclrn(devclrn),
	.devpor(devpor),
	.devoe(devoe),
	.dataout(),
	.padio(p));
// synopsys translate_off
defparam \p~I .feedback_mode = "none";
defparam \p~I .operation_mode = "output";
defparam \p~I .reg_source_mode = "none";
// synopsys translate_on

endmodule

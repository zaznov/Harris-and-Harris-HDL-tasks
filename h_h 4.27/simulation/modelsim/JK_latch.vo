// Copyright (C) 1991-2009 Altera Corporation
// Your use of Altera Corporation's design tools, logic functions 
// and other software and tools, and its AMPP partner logic 
// functions, and any output files from any of the foregoing 
// (including device programming or simulation files), and any 
// associated documentation or information are expressly subject 
// to the terms and conditions of the Altera Program License 
// Subscription Agreement, Altera MegaCore Function License 
// Agreement, or other applicable license agreement, including, 
// without limitation, that your use is for the sole purpose of 
// programming logic devices manufactured by Altera and sold by 
// Altera or its authorized distributors.  Please refer to the 
// applicable agreement for further details.

// VENDOR "Altera"
// PROGRAM "Quartus II"
// VERSION "Version 9.0 Build 235 06/17/2009 Service Pack 2 SJ Web Edition"

// DATE "03/17/2021 15:23:07"

// 
// Device: Altera EPF10K50SQC240-3 Package PQFP240
// 

// 
// This Verilog file should be used for ModelSim-Altera (Verilog) only
// 

`timescale 1 ns/ 1 ps

module JK_latch (
	J,
	K,
	CLK,
	Q);
input 	J;
input 	K;
input 	CLK;
output 	Q;

wire gnd = 1'b0;
wire vcc = 1'b1;

tri1 devclrn;
tri1 devpor;
tri1 devoe;
// synopsys translate_off
initial $sdf_annotate("JK_latch_v.sdo");
// synopsys translate_on

wire \J~dataout ;
wire \K~dataout ;
wire \CLK~dataout ;
wire \Q~reg0_regout ;


// atom is at PIN_212
flex10ke_io \J~I (
	.datain(gnd),
	.clk(gnd),
	.ena(vcc),
	.aclr(gnd),
	.oe(gnd),
	.devclrn(devclrn),
	.devpor(devpor),
	.devoe(devoe),
	.dataout(\J~dataout ),
	.padio(J));
// synopsys translate_off
defparam \J~I .feedback_mode = "from_pin";
defparam \J~I .operation_mode = "input";
defparam \J~I .reg_source_mode = "none";
// synopsys translate_on

// atom is at PIN_210
flex10ke_io \K~I (
	.datain(gnd),
	.clk(gnd),
	.ena(vcc),
	.aclr(gnd),
	.oe(gnd),
	.devclrn(devclrn),
	.devpor(devpor),
	.devoe(devoe),
	.dataout(\K~dataout ),
	.padio(K));
// synopsys translate_off
defparam \K~I .feedback_mode = "from_pin";
defparam \K~I .operation_mode = "input";
defparam \K~I .reg_source_mode = "none";
// synopsys translate_on

// atom is at PIN_91
flex10ke_io \CLK~I (
	.datain(gnd),
	.clk(gnd),
	.ena(vcc),
	.aclr(gnd),
	.oe(gnd),
	.devclrn(devclrn),
	.devpor(devpor),
	.devoe(devoe),
	.dataout(\CLK~dataout ),
	.padio(CLK));
// synopsys translate_off
defparam \CLK~I .feedback_mode = "from_pin";
defparam \CLK~I .operation_mode = "input";
defparam \CLK~I .reg_source_mode = "none";
// synopsys translate_on

// atom is at LC1_A19
flex10ke_lcell \Q~reg0 (
// Equation(s):
// \Q~reg0_regout  = DFFEA(\Q~reg0_regout  & (!\K~dataout ) # !\Q~reg0_regout  & \J~dataout , GLOBAL(\CLK~dataout ), , , , , )

	.dataa(vcc),
	.datab(\J~dataout ),
	.datac(\Q~reg0_regout ),
	.datad(\K~dataout ),
	.aclr(gnd),
	.aload(gnd),
	.clk(\CLK~dataout ),
	.cin(gnd),
	.cascin(vcc),
	.devclrn(devclrn),
	.devpor(devpor),
	.combout(),
	.regout(\Q~reg0_regout ),
	.cout(),
	.cascout());
// synopsys translate_off
defparam \Q~reg0 .clock_enable_mode = "false";
defparam \Q~reg0 .lut_mask = "0cfc";
defparam \Q~reg0 .operation_mode = "normal";
defparam \Q~reg0 .output_mode = "reg_only";
defparam \Q~reg0 .packed_mode = "false";
// synopsys translate_on

// atom is at PIN_87
flex10ke_io \Q~I (
	.datain(\Q~reg0_regout ),
	.clk(gnd),
	.ena(vcc),
	.aclr(gnd),
	.oe(vcc),
	.devclrn(devclrn),
	.devpor(devpor),
	.devoe(devoe),
	.dataout(),
	.padio(Q));
// synopsys translate_off
defparam \Q~I .feedback_mode = "none";
defparam \Q~I .operation_mode = "output";
defparam \Q~I .reg_source_mode = "none";
// synopsys translate_on

endmodule

// Copyright (C) 1991-2009 Altera Corporation
// Your use of Altera Corporation's design tools, logic functions 
// and other software and tools, and its AMPP partner logic 
// functions, and any output files from any of the foregoing 
// (including device programming or simulation files), and any 
// associated documentation or information are expressly subject 
// to the terms and conditions of the Altera Program License 
// Subscription Agreement, Altera MegaCore Function License 
// Agreement, or other applicable license agreement, including, 
// without limitation, that your use is for the sole purpose of 
// programming logic devices manufactured by Altera and sold by 
// Altera or its authorized distributors.  Please refer to the 
// applicable agreement for further details.

// VENDOR "Altera"
// PROGRAM "Quartus II"
// VERSION "Version 9.0 Build 235 06/17/2009 Service Pack 2 SJ Web Edition"

// DATE "03/11/2021 16:00:06"

// 
// Device: Altera EPF10K50SQC240-3 Package PQFP240
// 

// 
// This Verilog file should be used for ModelSim-Altera (Verilog) only
// 

`timescale 1 ns/ 1 ps

module mux_8 (
	sel,
	data,
	y);
input 	[2:0] sel;
input 	[7:0] data;
output 	y;

wire gnd = 1'b0;
wire vcc = 1'b1;

tri1 devclrn;
tri1 devpor;
tri1 devoe;
// synopsys translate_off
initial $sdf_annotate("mux_8_v.sdo");
// synopsys translate_on

wire \Mux0~0_combout ;
wire \Mux0~1_combout ;
wire \Mux0~2_combout ;
wire \Mux0~3_combout ;
wire \Mux0~4_combout ;
wire [7:0] \data~dataout ;
wire [2:0] \sel~dataout ;


// atom is at PIN_90
flex10ke_io \data[5]~I (
	.datain(gnd),
	.clk(gnd),
	.ena(vcc),
	.aclr(gnd),
	.oe(gnd),
	.devclrn(devclrn),
	.devpor(devpor),
	.devoe(devoe),
	.dataout(\data~dataout [5]),
	.padio(data[5]));
// synopsys translate_off
defparam \data[5]~I .feedback_mode = "from_pin";
defparam \data[5]~I .operation_mode = "input";
defparam \data[5]~I .reg_source_mode = "none";
// synopsys translate_on

// atom is at PIN_12
flex10ke_io \data[2]~I (
	.datain(gnd),
	.clk(gnd),
	.ena(vcc),
	.aclr(gnd),
	.oe(gnd),
	.devclrn(devclrn),
	.devpor(devpor),
	.devoe(devoe),
	.dataout(\data~dataout [2]),
	.padio(data[2]));
// synopsys translate_off
defparam \data[2]~I .feedback_mode = "from_pin";
defparam \data[2]~I .operation_mode = "input";
defparam \data[2]~I .reg_source_mode = "none";
// synopsys translate_on

// atom is at PIN_212
flex10ke_io \sel[0]~I (
	.datain(gnd),
	.clk(gnd),
	.ena(vcc),
	.aclr(gnd),
	.oe(gnd),
	.devclrn(devclrn),
	.devpor(devpor),
	.devoe(devoe),
	.dataout(\sel~dataout [0]),
	.padio(sel[0]));
// synopsys translate_off
defparam \sel[0]~I .feedback_mode = "from_pin";
defparam \sel[0]~I .operation_mode = "input";
defparam \sel[0]~I .reg_source_mode = "none";
// synopsys translate_on

// atom is at PIN_92
flex10ke_io \data[6]~I (
	.datain(gnd),
	.clk(gnd),
	.ena(vcc),
	.aclr(gnd),
	.oe(gnd),
	.devclrn(devclrn),
	.devpor(devpor),
	.devoe(devoe),
	.dataout(\data~dataout [6]),
	.padio(data[6]));
// synopsys translate_off
defparam \data[6]~I .feedback_mode = "from_pin";
defparam \data[6]~I .operation_mode = "input";
defparam \data[6]~I .reg_source_mode = "none";
// synopsys translate_on

// atom is at PIN_210
flex10ke_io \sel[1]~I (
	.datain(gnd),
	.clk(gnd),
	.ena(vcc),
	.aclr(gnd),
	.oe(gnd),
	.devclrn(devclrn),
	.devpor(devpor),
	.devoe(devoe),
	.dataout(\sel~dataout [1]),
	.padio(sel[1]));
// synopsys translate_off
defparam \sel[1]~I .feedback_mode = "from_pin";
defparam \sel[1]~I .operation_mode = "input";
defparam \sel[1]~I .reg_source_mode = "none";
// synopsys translate_on

// atom is at PIN_211
flex10ke_io \data[4]~I (
	.datain(gnd),
	.clk(gnd),
	.ena(vcc),
	.aclr(gnd),
	.oe(gnd),
	.devclrn(devclrn),
	.devpor(devpor),
	.devoe(devoe),
	.dataout(\data~dataout [4]),
	.padio(data[4]));
// synopsys translate_off
defparam \data[4]~I .feedback_mode = "from_pin";
defparam \data[4]~I .operation_mode = "input";
defparam \data[4]~I .reg_source_mode = "none";
// synopsys translate_on

// atom is at LC1_B30
flex10ke_lcell \Mux0~0 (
// Equation(s):
// \Mux0~0_combout  = \sel~dataout [0] & (\sel~dataout [1]) # !\sel~dataout [0] & (\sel~dataout [1] & \data~dataout [6] # !\sel~dataout [1] & (\data~dataout [4]))

	.dataa(\sel~dataout [0]),
	.datab(\data~dataout [6]),
	.datac(\sel~dataout [1]),
	.datad(\data~dataout [4]),
	.aclr(gnd),
	.aload(gnd),
	.clk(gnd),
	.cin(gnd),
	.cascin(vcc),
	.devclrn(devclrn),
	.devpor(devpor),
	.combout(\Mux0~0_combout ),
	.regout(),
	.cout(),
	.cascout());
// synopsys translate_off
defparam \Mux0~0 .clock_enable_mode = "false";
defparam \Mux0~0 .lut_mask = "e5e0";
defparam \Mux0~0 .operation_mode = "normal";
defparam \Mux0~0 .output_mode = "comb_only";
defparam \Mux0~0 .packed_mode = "false";
// synopsys translate_on

// atom is at PIN_91
flex10ke_io \data[7]~I (
	.datain(gnd),
	.clk(gnd),
	.ena(vcc),
	.aclr(gnd),
	.oe(gnd),
	.devclrn(devclrn),
	.devpor(devpor),
	.devoe(devoe),
	.dataout(\data~dataout [7]),
	.padio(data[7]));
// synopsys translate_off
defparam \data[7]~I .feedback_mode = "from_pin";
defparam \data[7]~I .operation_mode = "input";
defparam \data[7]~I .reg_source_mode = "none";
// synopsys translate_on

// atom is at LC2_B30
flex10ke_lcell \Mux0~1 (
// Equation(s):
// \Mux0~1_combout  = \sel~dataout [0] & (\Mux0~0_combout  & (\data~dataout [7]) # !\Mux0~0_combout  & \data~dataout [5]) # !\sel~dataout [0] & (\Mux0~0_combout )

	.dataa(\data~dataout [5]),
	.datab(\sel~dataout [0]),
	.datac(\Mux0~0_combout ),
	.datad(\data~dataout [7]),
	.aclr(gnd),
	.aload(gnd),
	.clk(gnd),
	.cin(gnd),
	.cascin(vcc),
	.devclrn(devclrn),
	.devpor(devpor),
	.combout(\Mux0~1_combout ),
	.regout(),
	.cout(),
	.cascout());
// synopsys translate_off
defparam \Mux0~1 .clock_enable_mode = "false";
defparam \Mux0~1 .lut_mask = "f838";
defparam \Mux0~1 .operation_mode = "normal";
defparam \Mux0~1 .output_mode = "comb_only";
defparam \Mux0~1 .packed_mode = "false";
// synopsys translate_on

// atom is at PIN_11
flex10ke_io \data[1]~I (
	.datain(gnd),
	.clk(gnd),
	.ena(vcc),
	.aclr(gnd),
	.oe(gnd),
	.devclrn(devclrn),
	.devpor(devpor),
	.devoe(devoe),
	.dataout(\data~dataout [1]),
	.padio(data[1]));
// synopsys translate_off
defparam \data[1]~I .feedback_mode = "from_pin";
defparam \data[1]~I .operation_mode = "input";
defparam \data[1]~I .reg_source_mode = "none";
// synopsys translate_on

// atom is at PIN_167
flex10ke_io \data[0]~I (
	.datain(gnd),
	.clk(gnd),
	.ena(vcc),
	.aclr(gnd),
	.oe(gnd),
	.devclrn(devclrn),
	.devpor(devpor),
	.devoe(devoe),
	.dataout(\data~dataout [0]),
	.padio(data[0]));
// synopsys translate_off
defparam \data[0]~I .feedback_mode = "from_pin";
defparam \data[0]~I .operation_mode = "input";
defparam \data[0]~I .reg_source_mode = "none";
// synopsys translate_on

// atom is at LC3_B30
flex10ke_lcell \Mux0~2 (
// Equation(s):
// \Mux0~2_combout  = \sel~dataout [1] & (\sel~dataout [0]) # !\sel~dataout [1] & (\sel~dataout [0] & \data~dataout [1] # !\sel~dataout [0] & (\data~dataout [0]))

	.dataa(\sel~dataout [1]),
	.datab(\data~dataout [1]),
	.datac(\sel~dataout [0]),
	.datad(\data~dataout [0]),
	.aclr(gnd),
	.aload(gnd),
	.clk(gnd),
	.cin(gnd),
	.cascin(vcc),
	.devclrn(devclrn),
	.devpor(devpor),
	.combout(\Mux0~2_combout ),
	.regout(),
	.cout(),
	.cascout());
// synopsys translate_off
defparam \Mux0~2 .clock_enable_mode = "false";
defparam \Mux0~2 .lut_mask = "e5e0";
defparam \Mux0~2 .operation_mode = "normal";
defparam \Mux0~2 .output_mode = "comb_only";
defparam \Mux0~2 .packed_mode = "false";
// synopsys translate_on

// atom is at PIN_13
flex10ke_io \data[3]~I (
	.datain(gnd),
	.clk(gnd),
	.ena(vcc),
	.aclr(gnd),
	.oe(gnd),
	.devclrn(devclrn),
	.devpor(devpor),
	.devoe(devoe),
	.dataout(\data~dataout [3]),
	.padio(data[3]));
// synopsys translate_off
defparam \data[3]~I .feedback_mode = "from_pin";
defparam \data[3]~I .operation_mode = "input";
defparam \data[3]~I .reg_source_mode = "none";
// synopsys translate_on

// atom is at LC4_B30
flex10ke_lcell \Mux0~3 (
// Equation(s):
// \Mux0~3_combout  = \sel~dataout [1] & (\Mux0~2_combout  & (\data~dataout [3]) # !\Mux0~2_combout  & \data~dataout [2]) # !\sel~dataout [1] & (\Mux0~2_combout )

	.dataa(\data~dataout [2]),
	.datab(\sel~dataout [1]),
	.datac(\Mux0~2_combout ),
	.datad(\data~dataout [3]),
	.aclr(gnd),
	.aload(gnd),
	.clk(gnd),
	.cin(gnd),
	.cascin(vcc),
	.devclrn(devclrn),
	.devpor(devpor),
	.combout(\Mux0~3_combout ),
	.regout(),
	.cout(),
	.cascout());
// synopsys translate_off
defparam \Mux0~3 .clock_enable_mode = "false";
defparam \Mux0~3 .lut_mask = "f838";
defparam \Mux0~3 .operation_mode = "normal";
defparam \Mux0~3 .output_mode = "comb_only";
defparam \Mux0~3 .packed_mode = "false";
// synopsys translate_on

// atom is at PIN_169
flex10ke_io \sel[2]~I (
	.datain(gnd),
	.clk(gnd),
	.ena(vcc),
	.aclr(gnd),
	.oe(gnd),
	.devclrn(devclrn),
	.devpor(devpor),
	.devoe(devoe),
	.dataout(\sel~dataout [2]),
	.padio(sel[2]));
// synopsys translate_off
defparam \sel[2]~I .feedback_mode = "from_pin";
defparam \sel[2]~I .operation_mode = "input";
defparam \sel[2]~I .reg_source_mode = "none";
// synopsys translate_on

// atom is at LC6_B30
flex10ke_lcell \Mux0~4 (
// Equation(s):
// \Mux0~4_combout  = \sel~dataout [2] & \Mux0~1_combout  # !\sel~dataout [2] & (\Mux0~3_combout )

	.dataa(vcc),
	.datab(\Mux0~1_combout ),
	.datac(\Mux0~3_combout ),
	.datad(\sel~dataout [2]),
	.aclr(gnd),
	.aload(gnd),
	.clk(gnd),
	.cin(gnd),
	.cascin(vcc),
	.devclrn(devclrn),
	.devpor(devpor),
	.combout(\Mux0~4_combout ),
	.regout(),
	.cout(),
	.cascout());
// synopsys translate_off
defparam \Mux0~4 .clock_enable_mode = "false";
defparam \Mux0~4 .lut_mask = "ccf0";
defparam \Mux0~4 .operation_mode = "normal";
defparam \Mux0~4 .output_mode = "comb_only";
defparam \Mux0~4 .packed_mode = "false";
// synopsys translate_on

// atom is at PIN_14
flex10ke_io \y~I (
	.datain(\Mux0~4_combout ),
	.clk(gnd),
	.ena(vcc),
	.aclr(gnd),
	.oe(vcc),
	.devclrn(devclrn),
	.devpor(devpor),
	.devoe(devoe),
	.dataout(),
	.padio(y));
// synopsys translate_off
defparam \y~I .feedback_mode = "none";
defparam \y~I .operation_mode = "output";
defparam \y~I .reg_source_mode = "none";
// synopsys translate_on

endmodule
